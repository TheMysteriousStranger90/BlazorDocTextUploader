@page "/"
@using BlazorDocTextUploader.Client.Validations
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject IConfiguration Configuration


<h1 class="p-1 display-4 mt-6 mb-6">File Upload</h1>

@if (_isUploading)
{
    <p>Uploading...</p>
}
else if (_uploadComplete)
{
    <p>File has been uploaded successfully!</p>
}

<EditForm Model="_fileUploadModel" OnValidSubmit="UploadFile" enctype="multipart/form-data">
    <div class="form-row mt-3">
        <div class="mb-4">
            <label for="textInput" class="form-label user-select-none mt-3">Email</label>
            <InputText id="textInput" @bind-Value="_fileUploadModel.UserEmail" class="form-control " placeholder="example@gmail.com"/>
            <ValidationMessage For="@(() => _fileUploadModel.UserEmail)"/>
        </div>

        
<div class="mb-4">
    <label for="fileInput" class="form-label user-select-none mt-3">Document to upload</label>
    <InputFile id="fileInput" accept=".docx" class="form-control" OnChange="OnInputFileChange" />
    <ValidationMessage For="@(() => _fileUploadModel.UserDocTextFile)" />
</div>


     
    </div>

    <button type="button" class="btn btn-lg mt-3" style="background-color: #9f7aea; color: #171717" @onclick="UploadFile">Upload</button>
</EditForm>

<style>
    body {
        height: 100%;
        background-color: #171717;
        font-family: 'Berlin Sans FB';
        max-width: 400px;
        margin: 60px auto;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 5px;
    }

    h1 {
        color: #9f7aea;
    }

    button {
        color: #3a3a3a;
    }

    .form-label {
        color: #9f7aea;
    }
</style>

@code {
    
    private FileUploadModel _fileUploadModel = new FileUploadModel();
    private bool _isUploading;
    private bool _uploadComplete;

    private async Task UploadFile()
    {
        _isUploading = true;

        if (string.IsNullOrWhiteSpace(_fileUploadModel.UserEmail) || _fileUploadModel.UserDocTextFile == null)
        {
            _isUploading = false;
            return;
        }

        try
        {
            var apiUrl = "https://azurestorage90bh.blob.core.windows.net/projectcontainer";
            var formData = new MultipartFormDataContent();
            formData.Add(new StringContent(_fileUploadModel.UserEmail), "Email");
            formData.Add(new StreamContent(_fileUploadModel.UserDocTextFile.OpenReadStream()), "File", _fileUploadModel.UserDocTextFile.Name);

            using (var client = new HttpClient())
            {
                var response = await client.PostAsJsonAsync($"{apiUrl}/Uploader/projectcontainer", formData);

                if (response.IsSuccessStatusCode)
                {
                    _uploadComplete = true;
                }
                else
                {
                    _uploadComplete = false;
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Upload failed with status code: {response.StatusCode}");
                    Console.WriteLine($"Error response: {errorResponse}");
                }
            }
        }
        catch (HttpRequestException ex)
        {
            _isUploading = false;
            Console.WriteLine($"HTTP request error: {ex.Message}");
        }
        catch (Exception ex)
        {
            _isUploading = false;
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            _isUploading = false;
        }
    }
    
    private void OnInputFileChange (InputFileChangeEventArgs e)
    {
        _fileUploadModel.UserDocTextFile = e.File;
    }
    
    private class FileUploadModel
    {
        [EmailAddress]
        public string UserEmail { get; set; }

        [FileTypeValidation(".doc", ".docx", ErrorMessage = "File type must be .doc or .docx")]
        public  IBrowserFile UserDocTextFile { get; set; }
    }
}
